-- SQL INTERMEDIATE CHALLENGE 1

CREATE TABLE HACKERS(
HACKER_ID INT,
NAME VARCHAR(250)
);

CREATE TABLE CHALLENGES(
CHALLENGE_ID INT,
HACKER_ID INT
);

INSERT INTO HACKERS(HACKER_ID, NAME)
VALUES (5077, 'Rose'),
       (21283, 'Angela'),
       (62743, 'Frank'),
       (88255, 'Patrick'),
       (96196, 'Lisa');

INSERT INTO CHALLENGES(CHALLENGE_ID, HACKER_ID)
VALUES (61654, 5077),
       (58302, 21283),
       (40587, 88255),
       (29477, 5077),
       (1220, 21283),
       (69514, 21283),
       (46561, 62743),
       (58077, 62743),
       (18483, 88255),
       (76766, 21283),
       (52382, 5077),
       (74467, 21283),
       (33625, 96196),
       (26053, 88255),
       (42665, 62743),
       (12859, 62743),
       (70094, 21283),
       (34599, 88255),
       (54680, 88255),
       (61881, 5077);

-- QUERY TO COUNT TOTAL CHALLENGES PER HACKER
SELECT H.HACKER_ID, H.NAME, COUNT(*) AS TOTAL_CHALLENGES
FROM HACKERS H 
JOIN CHALLENGES C ON H.HACKER_ID = C.HACKER_ID
GROUP BY H.HACKER_ID, H.NAME
ORDER BY TOTAL_CHALLENGES DESC, H.HACKER_ID;

-- QUERY TO GET HACKERS WITH MAX OR UNIQUE CHALLENGE COUNTS
SELECT H.HACKER_ID, H.NAME, COUNT(*) AS TOTAL_CHALLENGES
FROM HACKERS H
JOIN CHALLENGES C ON H.HACKER_ID = C.HACKER_ID
GROUP BY H.HACKER_ID, H.NAME
HAVING COUNT(*) = (SELECT MAX(CHALLENGE_COUNT) 
                   FROM (SELECT HACKER_ID, COUNT(*) AS CHALLENGE_COUNT 
                         FROM CHALLENGES 
                         GROUP BY HACKER_ID) AS MAX_COUNT)
   OR COUNT(*) IN (SELECT CHALLENGE_COUNT 
                   FROM (SELECT COUNT(*) AS CHALLENGE_COUNT 
                         FROM CHALLENGES 
                         GROUP BY HACKER_ID) AS COUNTS
                   GROUP BY CHALLENGE_COUNT 
                   HAVING COUNT(CHALLENGE_COUNT) = 1)
ORDER BY TOTAL_CHALLENGES DESC, HACKER_ID;

-- SQL INTERMEDIATE CHALLENGE 2

CREATE TABLE SYMMETRIC(
X INT,
Y INT
);

INSERT INTO SYMMETRIC 
VALUES (20, 20),
       (20, 20),
       (20, 21),
       (23, 22),
       (22, 23),
       (21, 20);

-- QUERY TO FIND SYMMETRIC PAIRS
SELECT DISTINCT A.X, A.Y
FROM SYMMETRIC A
JOIN SYMMETRIC B
ON A.X = B.Y AND A.Y = B.X
WHERE A.X <= A.Y
ORDER BY A.X, A.Y;

-- SQL INTERMEDIATE CHALLENGE 3

CREATE TABLE STUDENTS(
ID INT,
NAME VARCHAR(250)
);

CREATE TABLE FRIENDS(
ID INT,
FRIEND_ID INT
);

CREATE TABLE PACKAGES(
ID INT,
SALARY FLOAT
);

INSERT INTO STUDENTS(ID, NAME)
VALUES (1, 'Ashely'),
       (2, 'Samantha'),
       (3, 'Julia'),
       (4, 'Scarlet');

INSERT INTO FRIENDS(ID, FRIEND_ID)
VALUES (1, 2),
       (2, 3),
       (3, 4),
       (4, 1);

INSERT INTO PACKAGES(ID, SALARY)
VALUES (1, 15.20),
       (2, 10.06),
       (3, 11.55),
       (4, 12.12);

-- QUERY TO FIND STUDENTS WHOSE FRIENDS HAVE HIGHER SALARY
SELECT S.NAME
FROM STUDENTS S 
JOIN FRIENDS F ON S.ID = F.ID
JOIN PACKAGES P1 ON S.ID = P1.ID
JOIN PACKAGES P2 ON F.FRIEND_ID = P2.ID
WHERE P2.SALARY > P1.SALARY
ORDER BY P2.SALARY;
